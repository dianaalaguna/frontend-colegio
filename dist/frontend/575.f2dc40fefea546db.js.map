{"version":3,"file":"575.f2dc40fefea546db.js","mappings":"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","names":["UserTypeService","constructor","http","this","baseUrl","environment","apiUrl","getUserTypes","get","i0","i1","factory","…µfac","providedIn","RegisterComponent_div_12_div_1_Template","RegisterComponent_div_12_div_2_Template","emailInput_r2","errors","required","email","RegisterComponent_div_18_div_1_Template","RegisterComponent_div_18_div_2_Template","passwordInput_r3","minlength","tipo_r4","_id","type","RegisterComponent","userTypeService","authService","router","userTypes","formData","username","password","nombres","apellidos","telefono","tipoUsuario","ngOnInit","subscribe","next","tipos","length","error","err","console","onSubmit","register","res","alert","navigate","i2","i3","selectors","standalone","features","decls","vars","consts","template","rf","ctx","_r1","$event","RegisterComponent_div_12_Template","RegisterComponent_div_18_Template","RegisterComponent_div_24_Template","RegisterComponent_div_30_Template","RegisterComponent_option_43_Template","RegisterComponent_div_44_Template","_c0","invalid","touched","nombresInput_r6","apellidosInput_r7","tipoUsuarioInput_r8","registroForm_r5","CommonModule","i4","FormsModule","i5","styles"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./src/app/services/user-type.service.ts","./src/app/pages/register/register.component.html","./src/app/pages/register/register.component.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../environments/environment';\r\n\r\nexport interface UserType {\r\n  _id: string;\r\n  number: number;\r\n  type: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserTypeService {\r\n  //private apiUrl = 'http://localhost:5000/api/userType';\r\n  private baseUrl = `${environment.apiUrl}/userType`;\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getUserTypes(): Observable<UserType[]> {\r\n    return this.http.get<UserType[]>(this.baseUrl);\r\n  }\r\n}\r\n","<div class=\"container mt-5\" style=\"max-width: 500px;\">\r\n  <div class=\"card shadow-sm\">\r\n    <div class=\"card-body\">\r\n      <h3 class=\"card-title text-center mb-4\">üìù Registro de Usuario</h3>\r\n\r\n      <form #registroForm=\"ngForm\" (ngSubmit)=\"onSubmit()\">\r\n        <!-- Email / Username -->\r\n        <div class=\"mb-3\">\r\n          <label for=\"username\" class=\"form-label\">Correo electr√≥nico</label>\r\n          <input\r\n            type=\"email\"\r\n            id=\"username\"\r\n            name=\"username\"\r\n            [(ngModel)]=\"formData.username\"\r\n            required\r\n            email\r\n            #emailInput=\"ngModel\"\r\n            class=\"form-control\"\r\n            [ngClass]=\"{ 'is-invalid': emailInput.invalid && emailInput.touched }\"\r\n            placeholder=\"ejemplo@correo.com\"\r\n          />\r\n          <div *ngIf=\"emailInput.invalid && emailInput.touched\" class=\"invalid-feedback\">\r\n            <div *ngIf=\"emailInput.errors?.['required']\">El correo es obligatorio.</div>\r\n            <div *ngIf=\"emailInput.errors?.['email']\">Formato de correo inv√°lido.</div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Password -->\r\n        <div class=\"mb-3\">\r\n          <label for=\"password\" class=\"form-label\">Contrase√±a</label>\r\n          <input\r\n            type=\"password\"\r\n            id=\"password\"\r\n            name=\"password\"\r\n            [(ngModel)]=\"formData.password\"\r\n            required\r\n            minlength=\"6\"\r\n            #passwordInput=\"ngModel\"\r\n            class=\"form-control\"\r\n            [ngClass]=\"{ 'is-invalid': passwordInput.invalid && passwordInput.touched }\"\r\n            placeholder=\"********\"\r\n          />\r\n          <div *ngIf=\"passwordInput.invalid && passwordInput.touched\" class=\"invalid-feedback\">\r\n            <div *ngIf=\"passwordInput.errors?.['required']\">La contrase√±a es obligatoria.</div>\r\n            <div *ngIf=\"passwordInput.errors?.['minlength']\">\r\n              La contrase√±a debe tener al menos 6 caracteres.\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Nombres -->\r\n        <div class=\"mb-3\">\r\n          <label for=\"nombres\" class=\"form-label\">Nombres</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"nombres\"\r\n            name=\"nombres\"\r\n            [(ngModel)]=\"formData.nombres\"\r\n            required\r\n            #nombresInput=\"ngModel\"\r\n            class=\"form-control\"\r\n            [ngClass]=\"{ 'is-invalid': nombresInput.invalid && nombresInput.touched }\"\r\n          />\r\n          <div *ngIf=\"nombresInput.invalid && nombresInput.touched\" class=\"invalid-feedback\">\r\n            El nombre es obligatorio.\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Apellidos -->\r\n        <div class=\"mb-3\">\r\n          <label for=\"apellidos\" class=\"form-label\">Apellidos</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"apellidos\"\r\n            name=\"apellidos\"\r\n            [(ngModel)]=\"formData.apellidos\"\r\n            required\r\n            #apellidosInput=\"ngModel\"\r\n            class=\"form-control\"\r\n            [ngClass]=\"{ 'is-invalid': apellidosInput.invalid && apellidosInput.touched }\"\r\n          />\r\n          <div *ngIf=\"apellidosInput.invalid && apellidosInput.touched\" class=\"invalid-feedback\">\r\n            El apellido es obligatorio.\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Tel√©fono -->\r\n        <div class=\"mb-3\">\r\n          <label for=\"telefono\" class=\"form-label\">Tel√©fono</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"telefono\"\r\n            name=\"telefono\"\r\n            [(ngModel)]=\"formData.telefono\"\r\n            #telefonoInput=\"ngModel\"\r\n            class=\"form-control\"\r\n            placeholder=\"Ej: 3001234567\"\r\n          />\r\n        </div>\r\n\r\n        <!-- Tipo de Usuario (select) -->\r\n        <div class=\"mb-3\">\r\n          <label for=\"tipoUsuario\" class=\"form-label\">Tipo de Usuario</label>\r\n          <select\r\n            id=\"tipoUsuario\"\r\n            name=\"tipoUsuario\"\r\n            [(ngModel)]=\"formData.tipoUsuario\"\r\n            required\r\n            #tipoUsuarioInput=\"ngModel\"\r\n            class=\"form-control\"\r\n            [ngClass]=\"{ 'is-invalid': tipoUsuarioInput.invalid && tipoUsuarioInput.touched }\"\r\n          >\r\n            <option value=\"\" disabled selected>Seleccione un tipo</option>\r\n            <option *ngFor=\"let tipo of userTypes\" [value]=\"tipo._id\">\r\n              {{ tipo.type }}\r\n            </option>\r\n          </select>\r\n          <div *ngIf=\"tipoUsuarioInput.invalid && tipoUsuarioInput.touched\" class=\"invalid-feedback\">\r\n            Seleccione un tipo de usuario.\r\n          </div>\r\n        </div>\r\n\r\n        <button type=\"submit\" class=\"btn btn-success w-100\" [disabled]=\"registroForm.invalid\">\r\n          Registrarse\r\n        </button>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport { UserTypeService, UserType } from '../../services/user-type.service';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule],\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.css']\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n  userTypes: UserType[] = [];\r\n\r\n  formData = {\r\n    username: '',\r\n    password: '',\r\n    nombres: '',\r\n    apellidos: '',\r\n    telefono: '',\r\n    tipoUsuario: null as string | null\r\n  };\r\n\r\n  constructor(\r\n    private userTypeService: UserTypeService,\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.userTypeService.getUserTypes().subscribe({\r\n      next: (tipos) => {\r\n        this.userTypes = tipos;\r\n        if (tipos.length > 0) {\r\n          // Selecciona autom√°ticamente el primer tipo de usuario\r\n          this.formData.tipoUsuario = tipos[0]._id;\r\n        }\r\n      },\r\n      error: (err) => {\r\n        console.error('Error al cargar tipos de usuario:', err);\r\n      }\r\n    });\r\n  }\r\n\r\n  onSubmit(): void {\r\n    this.authService.register(this.formData).subscribe({\r\n      next: (res) => {\r\n        alert('Usuario registrado con √©xito');\r\n        this.router.navigate(['/login']);\r\n      },\r\n      error: (err) => {\r\n        console.error('Error al registrar usuario:', err);\r\n        alert('Error al registrar. Verifica los datos.');\r\n      }\r\n    });\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}