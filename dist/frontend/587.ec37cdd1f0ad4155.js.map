{"version":3,"file":"587.ec37cdd1f0ad4155.js","mappings":"2PAeUA,MAFJ,OAEIA,CAF2C,OAE3CA,CADE,aAGFA,MAAA,kBAAAC,GAAA,MAAAC,EAAAF,MAAAG,GAAAC,UAAAC,EAAAL,QAAA,OAAAA,MAAUK,EAAAC,iBAAAL,EAAAC,EAAAK,KAAsC,GAGlDP,UACAA,MAAA,QAAIA,MAAA,GAAqBA,QACzBA,MAAA,QAAIA,MAAA,GAAuBA,QAC3BA,MAAA,QAAIA,MAAA,GACNA,sCAHMA,MAAA,GAAAA,MAAAE,EAAAM,SACAR,MAAA,GAAAA,MAAAE,EAAAO,WACAT,MAAA,GAAAA,MAAAE,EAAAQ,yCAKVV,MAAA,WACEA,MAAA,uCACFA,SCfK,IAAMW,EAA2B,MAAlC,MAAOA,EAKXC,YACUC,EACAC,EACAC,GAFAC,KAAAH,QACAG,KAAAF,iBACAE,KAAAD,iBANVC,KAAAC,mBAAgC,GAChCD,KAAAE,mBAAkC,IAAIC,GAMnC,CAEHC,WACEJ,KAAKK,UAAYL,KAAKH,MAAMS,SAASC,SAASC,IAAI,MAClDR,KAAKS,wBACP,CAEAA,yBACET,KAAKF,eAAeY,uBAAuBV,KAAKK,WAAWM,UAAWC,IACpEZ,KAAKC,mBAAqBW,EAC1BC,QAAQC,IAAI,gBAAiBd,KAAKC,mBAAkB,EAExD,CAEAX,iBAAiByB,EAAcC,GACRD,EAAME,QAEGC,QAG5BlB,KAAKE,mBAAmBiB,IAAIH,GAE5BhB,KAAKE,mBAAmBkB,OAAOJ,EAEnC,CAEAK,qBACE,MAAMC,EAAaC,MAAMC,KAAKxB,KAAKE,oBAET,IAAtBoB,EAAWG,QAKfH,EAAWI,QAAQC,IACjB3B,KAAKD,eAAe6B,kBAAkB5B,KAAKK,UAAWsB,GAAIhB,UAAU,CAClEkB,KAAMA,KACJhB,QAAQC,IAAI,cAAca,cAC1B3B,KAAKS,wBAAsB,EAE7BqB,MAAQC,IACNlB,QAAQiB,MAAM,+BAA+BH,IAAMI,EAAG,GAEzD,GAIH/B,KAAKE,mBAAmB8B,SAjBtBC,MAAM,+CAkBV,iDAzDWtC,GAA2BX,MAAAkD,MAAAlD,MAAAmD,KAAAnD,MAAAoD,KAAA,oCAA3BzC,EAA2B0C,UAAA,8BAAAC,YAAA,EAAAC,SAAA,CAAAvD,OAAAwD,MAAA,GAAAC,KAAA,EAAAC,OAAA,uRAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,IDdtC5D,MADF,UACEA,CAD0B,UACTA,MAAA,sEAA6CA,QAKxDA,MAHN,YAGMA,CAH0C,YAG1CA,CAFsB,OAEtBA,CADE,QACEA,MAAA,iBAAWA,QACfA,MAAA,QAAIA,MAAA,YAAMA,QACVA,MAAA,SAAIA,MAAA,eAAQA,QACZA,MAAA,SAAIA,MAAA,gBAERA,YACAA,MAAA,YACEA,MAAA,GAAA8D,EAAA,YAaJ9D,UAEAA,MAAA,GAAA+D,EAAA,aAIA/D,MAAA,eAAqCA,MAAA,0BAAS6D,EAAAxB,oBAAoB,GAAErC,MAAA,4BACtEA,iBApB8BA,MAAA,IAAAA,MAAA,UAAA6D,EAAA5C,oBAetBjB,cAAA,WAAA6D,EAAA5C,mBAAAwB,wBCjBIuB,KAAYC,UAAEC,OAAW,SAIxBvD,CAA2B","names":["i0","$event","student_r2","_r1","$implicit","ctx_r2","onCheckboxChange","_id","nombres","apellidos","codigoEstudiante","AsignarEstudiantesComponent","constructor","route","studentService","subjectService","this","unassignedStudents","selectedStudentIds","Set","ngOnInit","subjectId","snapshot","paramMap","get","loadUnassignedStudents","getStudentsNotAssigned","subscribe","students","console","log","event","studentId","target","checked","add","delete","asignarEstudiantes","studentIds","Array","from","length","forEach","id","asociarEstudiante","next","error","err","clear","alert","i1","i2","i3","selectors","standalone","features","decls","vars","consts","template","rf","ctx","AsignarEstudiantesComponent_tr_15_Template","AsignarEstudiantesComponent_div_16_Template","CommonModule","i4","FormsModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./src/app/pages/asignar-estudiantes/asignar-estudiantes.component.html","./src/app/pages/asignar-estudiantes/asignar-estudiantes.component.ts"],"sourcesContent":["<div class=\"container mt-4\">\r\n  <h2 class=\"mb-4\">üë®‚Äçüéì Estudiantes no asignados a esta materia</h2>\r\n\r\n  <table class=\"table table-bordered table-hover\">\r\n    <thead class=\"table-dark\">\r\n      <tr>\r\n        <th>Seleccionar</th>\r\n        <th>Nombre</th>\r\n        <th>Apellido</th>\r\n        <th>C√≥digo</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      <tr *ngFor=\"let student of unassignedStudents\">\r\n        <td>\r\n          <input\r\n          type=\"checkbox\"\r\n          (change)=\"onCheckboxChange($event, student._id!)\"\r\n        />\r\n\r\n        </td>\r\n        <td>{{ student.nombres }}</td>\r\n        <td>{{ student.apellidos }}</td>\r\n        <td>{{ student.codigoEstudiante }}</td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n\r\n  <div *ngIf=\"unassignedStudents.length === 0\" class=\"alert alert-info text-center\">\r\n    No hay estudiantes por asignar.\r\n  </div>\r\n\r\n  <button class=\"btn btn-primary mt-3\" (click)=\"asignarEstudiantes()\">Asignar seleccionados</button>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { StudentService } from '../../services/student.service';\r\nimport { SubjectService } from '../../services/subject.service';\r\nimport { Student } from '../../models/student.model';\r\n\r\n@Component({\r\n  selector: 'app-asignar-estudiantes',\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule],\r\n  templateUrl: './asignar-estudiantes.component.html',\r\n  styleUrls: ['./asignar-estudiantes.component.css']\r\n})\r\nexport class AsignarEstudiantesComponent implements OnInit {\r\n  subjectId!: string;\r\n  unassignedStudents: Student[] = [];\r\n  selectedStudentIds: Set<string> = new Set();\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private studentService: StudentService,\r\n    private subjectService: SubjectService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.subjectId = this.route.snapshot.paramMap.get('id')!;\r\n    this.loadUnassignedStudents();\r\n  }\r\n\r\n  loadUnassignedStudents(): void {\r\n    this.studentService.getStudentsNotAssigned(this.subjectId).subscribe((students) => {\r\n      this.unassignedStudents = students;\r\n      console.log('Estudiantes: ', this.unassignedStudents);\r\n    });\r\n  }\r\n\r\n  onCheckboxChange(event: Event, studentId: string): void {\r\n    const inputElement = event.target as HTMLInputElement;\r\n\r\n    const checked = inputElement?.checked ?? false;\r\n\r\n    if (checked) {\r\n      this.selectedStudentIds.add(studentId);\r\n    } else {\r\n      this.selectedStudentIds.delete(studentId);\r\n    }\r\n  }\r\n\r\n  asignarEstudiantes(): void {\r\n    const studentIds = Array.from(this.selectedStudentIds);\r\n\r\n    if (studentIds.length === 0) {\r\n      alert('Por favor selecciona al menos un estudiante.');\r\n      return;\r\n    }\r\n\r\n    studentIds.forEach(id => {\r\n      this.subjectService.asociarEstudiante(this.subjectId, id).subscribe({\r\n        next: () => {\r\n          console.log(`Estudiante ${id} asignado`);\r\n          this.loadUnassignedStudents(); // recarga despu√©s de cada asignaci√≥n\r\n        },\r\n        error: (err) => {\r\n          console.error(`Error al asignar estudiante ${id}`, err);\r\n        }\r\n      });\r\n    });\r\n\r\n    // Limpiar selecci√≥n\r\n    this.selectedStudentIds.clear();\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}