{"version":3,"file":"common.3860d816ed11dc23.js","mappings":"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","names":["StudentService","constructor","http","this","baseUrl","environment","apiUrl","createStudent","student","post","updateStudent","codigoEstudiante","data","put","getStudentByCode","get","getStudentsByEmail","correoTutor","getStudents","deleteUser","delete","getStudentsNotAssigned","subjectId","i0","i1","factory","Éµfac","providedIn","SubjectService","getSubjectsWithUsers","getSubjectsWithoutProfessors","getSubjectById","id","pipe","map","subjects","find","subject","_id","crearMateria","deleteSubject","updateSubject","removeEstudianteFromSubject","estudianteId","body","removeProfesorFromSubject","profesorId","addProfesorToSubject","getAllSubjects","asociarProfesor","asociarEstudiante","studentId","UserService","getUsers","getUserByUsername","username","updateUser","getProfesores"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./src/app/services/student.service.ts","./src/app/services/subject.service.ts","./src/app/services/user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Student } from '../models/student.model';\r\nimport { environment } from '../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class StudentService {\r\n  //private baseUrl = 'http://localhost:5000/api/student';\r\n  private baseUrl = `${environment.apiUrl}/student`;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  createStudent(student: any): Observable<any> {\r\n    return this.http.post(`${this.baseUrl}/createstudent`, student);\r\n  }\r\n\r\n  updateStudent(codigoEstudiante: string, data: Partial<Student>): Observable<any> {\r\n    return this.http.put(`${this.baseUrl}/updatestudentbycode/${codigoEstudiante}`, data);\r\n  }\r\n\r\n  getStudentByCode(codigoEstudiante: string): Observable<any> {\r\n    return this.http.get(`${this.baseUrl}/getstudentbycode/${codigoEstudiante}`);\r\n  }\r\n\r\n  getStudentsByEmail(correoTutor: string): Observable<Student[]> {\r\n    return this.http.get<Student[]>(`${this.baseUrl}/getstudentsbyemail/${correoTutor}`);\r\n  }\r\n\r\n  getStudents(): Observable<Student[]> {\r\n    return this.http.get<Student[]>(`${this.baseUrl}/getallstudents`);\r\n  }\r\n\r\n  deleteUser(codigoEstudiante: string): Observable<any> {\r\n    return this.http.delete(`${this.baseUrl}/deletestudentbycode/${codigoEstudiante}`);\r\n  }\r\n\r\n  getStudentsNotAssigned(subjectId: string): Observable<Student[]> {\r\n    const url = `${this.baseUrl}/${subjectId}/unassigned-students`;\r\n    return this.http.get<Student[]>(url);\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Subject } from '../models/subject.model';\r\nimport { environment } from '../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SubjectService {\r\n  //private baseUrl = 'http://localhost:5000/api/subject';\r\n  private baseUrl = `${environment.apiUrl}/subject`;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getSubjectsWithUsers(): Observable<any[]> {\r\n    return this.http.get<any[]>(`${this.baseUrl}/with-users`);\r\n  }\r\n\r\n  getSubjectsWithoutProfessors(): Observable<any[]> {\r\n    return this.http.get<any[]>(`${this.baseUrl}/without-professors`);\r\n  }\r\n\r\n  getSubjectById(id: string): Observable<any> {\r\n    return this.getSubjectsWithUsers().pipe(\r\n      map(subjects => subjects.find(subject => subject._id === id))\r\n    );\r\n  }\r\n\r\n  crearMateria(data: { nombre: string; grado: string; periodo: number }) {\r\n    return this.http.post(`${this.baseUrl}/createsubject`, data);\r\n  }\r\n\r\n  // MÃ©todo para eliminar una materia por ID\r\n  deleteSubject(id: string): Observable<any> {\r\n    return this.http.delete(`${this.baseUrl}/deletesubjectbyid/${id}`);\r\n  }\r\n\r\n  // Actualizar materia por ID\r\n  updateSubject(id: string, subject: any): Observable<any> {\r\n    return this.http.put(`${this.baseUrl}/updateSubjectById/${id}`, subject);\r\n  }\r\n\r\n  removeEstudianteFromSubject(subjectId: string, estudianteId: string) {\r\n    return this.http.delete(`${this.baseUrl}/remove-estudiante/${subjectId}`, {\r\n      body: { estudianteId }\r\n    });\r\n  }\r\n\r\n  removeProfesorFromSubject(subjectId: string, profesorId: string) {\r\n    return this.http.delete(`${this.baseUrl}/remove-profesor/${subjectId}`, {\r\n      body: { profesorId }\r\n    });\r\n  }\r\n\r\n  // MÃ©todo para asociar un profesor a una materia\r\n  addProfesorToSubject(subjectId: string, profesorId: string): Observable<any> {\r\n    return this.http.post(`${this.baseUrl}/add-profesor-to-subject/${subjectId}`, { profesorId });\r\n  }\r\n\r\n  // Obtener todas las materias\r\n  getAllSubjects(): Observable<Subject[]> {\r\n    return this.http.get<Subject[]>(`${this.baseUrl}/getallsubjects`);\r\n  }\r\n\r\n  // Asociar un profesor a una materia\r\n  asociarProfesor(subjectId: string, profesorId: string) {\r\n    return this.http.post(`${this.baseUrl}/${subjectId}/add-profesor`, { profesorId });\r\n  }\r\n\r\n  asociarEstudiante(subjectId: string, studentId: string) {\r\n    return this.http.post(`${this.baseUrl}/${subjectId}/add-estudiante`, {\r\n      estudianteId: studentId,\r\n    });\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { User } from '../models/user.model';\r\nimport { environment } from '../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserService {\r\n  //private baseUrl = 'http://localhost:5000/api/user';\r\n  private baseUrl = `${environment.apiUrl}/user`;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  // ðŸ”¹ Obtener todos los usuarios\r\n  getUsers(): Observable<User[]> {\r\n    return this.http.get<User[]>(`${this.baseUrl}/getallusers`);\r\n  }\r\n\r\n  // ðŸ”¹ Obtener un usuario por username\r\n  getUserByUsername(username: string): Observable<User> {\r\n    return this.http.get<User>(`${this.baseUrl}/getuserbyusername/${username}`);\r\n  }\r\n\r\n  // ðŸ”¹ Actualizar un usuario por username\r\n  updateUser(username: string, data: Partial<User>): Observable<any> {\r\n    return this.http.put(`${this.baseUrl}/updateuserbyusername/${username}`, data);\r\n  }\r\n\r\n  // ðŸ”¹ Eliminar un usuario por username\r\n  deleteUser(username: string): Observable<any> {\r\n    return this.http.delete(`${this.baseUrl}/deleteuserbyusername/${username}`);\r\n  }\r\n\r\n  // Obtener los usuarios de tipo \"Profesor\"\r\n  getProfesores(): Observable<User[]> {\r\n    return this.http.get<User[]>(`${this.baseUrl}/getallprofesores`);\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}